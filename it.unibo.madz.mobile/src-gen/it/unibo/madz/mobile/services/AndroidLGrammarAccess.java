/*
* generated by Xtext
*/

package it.unibo.madz.mobile.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class AndroidLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AndroidSystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndroidSystem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDataAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDataDataParserRuleCall_0_0 = (RuleCall)cDataAssignment_0.eContents().get(0);
		private final Assignment cActionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActionActionParserRuleCall_1_0 = (RuleCall)cActionAssignment_1.eContents().get(0);
		private final Assignment cServiceInterfaceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cServiceInterfaceServiceInterfaceParserRuleCall_2_0 = (RuleCall)cServiceInterfaceAssignment_2.eContents().get(0);
		private final Assignment cComponentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cComponentComponentParserRuleCall_3_0 = (RuleCall)cComponentAssignment_3.eContents().get(0);
		private final Assignment cApplicationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cApplicationApplicationParserRuleCall_4_0 = (RuleCall)cApplicationAssignment_4.eContents().get(0);
		
		//AndroidSystem:
		//	data+=Data* action+=Action* serviceInterface=ServiceInterface* component+=Component* application=Application;
		public ParserRule getRule() { return rule; }

		//data+=Data* action+=Action* serviceInterface=ServiceInterface* component+=Component* application=Application
		public Group getGroup() { return cGroup; }

		//data+=Data*
		public Assignment getDataAssignment_0() { return cDataAssignment_0; }

		//Data
		public RuleCall getDataDataParserRuleCall_0_0() { return cDataDataParserRuleCall_0_0; }

		//action+=Action*
		public Assignment getActionAssignment_1() { return cActionAssignment_1; }

		//Action
		public RuleCall getActionActionParserRuleCall_1_0() { return cActionActionParserRuleCall_1_0; }

		//serviceInterface=ServiceInterface*
		public Assignment getServiceInterfaceAssignment_2() { return cServiceInterfaceAssignment_2; }

		//ServiceInterface
		public RuleCall getServiceInterfaceServiceInterfaceParserRuleCall_2_0() { return cServiceInterfaceServiceInterfaceParserRuleCall_2_0; }

		//component+=Component*
		public Assignment getComponentAssignment_3() { return cComponentAssignment_3; }

		//Component
		public RuleCall getComponentComponentParserRuleCall_3_0() { return cComponentComponentParserRuleCall_3_0; }

		//application=Application
		public Assignment getApplicationAssignment_4() { return cApplicationAssignment_4; }

		//Application
		public RuleCall getApplicationApplicationParserRuleCall_4_0() { return cApplicationApplicationParserRuleCall_4_0; }
	}

	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Component");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cActivityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cServiceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////------------------------------------------- 
		//// Component 
		////------------------------------------------- 
		//Component:
		//	Activity | Service;
		public ParserRule getRule() { return rule; }

		//Activity | Service
		public Alternatives getAlternatives() { return cAlternatives; }

		//Activity
		public RuleCall getActivityParserRuleCall_0() { return cActivityParserRuleCall_0; }

		//Service
		public RuleCall getServiceParserRuleCall_1() { return cServiceParserRuleCall_1; }
	}

	public class ServiceInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ServiceInterface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServiceInterfaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		////------------------------------------------- 
		//// Service Interface
		////------------------------------------------- 
		//ServiceInterface:
		//	"ServiceInterface" name=ID;
		public ParserRule getRule() { return rule; }

		//"ServiceInterface" name=ID
		public Group getGroup() { return cGroup; }

		//"ServiceInterface"
		public Keyword getServiceInterfaceKeyword_0() { return cServiceInterfaceKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Service");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cImplementsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInterfaceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cInterfaceServiceInterfaceCrossReference_3_0 = (CrossReference)cInterfaceAssignment_3.eContents().get(0);
		private final RuleCall cInterfaceServiceInterfaceIDTerminalRuleCall_3_0_1 = (RuleCall)cInterfaceServiceInterfaceCrossReference_3_0.eContents().get(1);
		
		////------------------------------------------- 
		//// Service
		////------------------------------------------- 
		//Service:
		//	"Service" name=ID "implements" interface=[ServiceInterface];
		public ParserRule getRule() { return rule; }

		//"Service" name=ID "implements" interface=[ServiceInterface]
		public Group getGroup() { return cGroup; }

		//"Service"
		public Keyword getServiceKeyword_0() { return cServiceKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"implements"
		public Keyword getImplementsKeyword_2() { return cImplementsKeyword_2; }

		//interface=[ServiceInterface]
		public Assignment getInterfaceAssignment_3() { return cInterfaceAssignment_3; }

		//[ServiceInterface]
		public CrossReference getInterfaceServiceInterfaceCrossReference_3_0() { return cInterfaceServiceInterfaceCrossReference_3_0; }

		//ID
		public RuleCall getInterfaceServiceInterfaceIDTerminalRuleCall_3_0_1() { return cInterfaceServiceInterfaceIDTerminalRuleCall_3_0_1; }
	}

	public class ActivityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Activity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActivityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cLaunchableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cLaunchableLaunchableKeyword_2_0 = (Keyword)cLaunchableAssignment_2.eContents().get(0);
		private final Assignment cActionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionsLocalActionParserRuleCall_3_0 = (RuleCall)cActionsAssignment_3.eContents().get(0);
		private final Assignment cInteractionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInteractionsInterActionParserRuleCall_4_0 = (RuleCall)cInteractionsAssignment_4.eContents().get(0);
		
		////------------------------------------------- 
		//// Activity 
		////------------------------------------------- 
		//Activity:
		//	"Activity" name=ID launchable?="launchable"? actions+=LocalAction* interactions+=InterAction*;
		public ParserRule getRule() { return rule; }

		//"Activity" name=ID launchable?="launchable"? actions+=LocalAction* interactions+=InterAction*
		public Group getGroup() { return cGroup; }

		//"Activity"
		public Keyword getActivityKeyword_0() { return cActivityKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//launchable?="launchable"?
		public Assignment getLaunchableAssignment_2() { return cLaunchableAssignment_2; }

		//"launchable"
		public Keyword getLaunchableLaunchableKeyword_2_0() { return cLaunchableLaunchableKeyword_2_0; }

		//actions+=LocalAction*
		public Assignment getActionsAssignment_3() { return cActionsAssignment_3; }

		//LocalAction
		public RuleCall getActionsLocalActionParserRuleCall_3_0() { return cActionsLocalActionParserRuleCall_3_0; }

		//interactions+=InterAction*
		public Assignment getInteractionsAssignment_4() { return cInteractionsAssignment_4; }

		//InterAction
		public RuleCall getInteractionsInterActionParserRuleCall_4_0() { return cInteractionsInterActionParserRuleCall_4_0; }
	}

	public class LocalActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cActionActionCrossReference_1_0 = (CrossReference)cActionAssignment_1.eContents().get(0);
		private final RuleCall cActionActionIDTerminalRuleCall_1_0_1 = (RuleCall)cActionActionCrossReference_1_0.eContents().get(1);
		private final Assignment cButtonAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cButtonButtonKeyword_2_0 = (Keyword)cButtonAssignment_2.eContents().get(0);
		
		////------------------------------------------- 
		//// LocalAction 
		////------------------------------------------- 
		//LocalAction:
		//	"action" action=[Action] button?="button"?;
		public ParserRule getRule() { return rule; }

		//"action" action=[Action] button?="button"?
		public Group getGroup() { return cGroup; }

		//"action"
		public Keyword getActionKeyword_0() { return cActionKeyword_0; }

		//action=[Action]
		public Assignment getActionAssignment_1() { return cActionAssignment_1; }

		//[Action]
		public CrossReference getActionActionCrossReference_1_0() { return cActionActionCrossReference_1_0; }

		//ID
		public RuleCall getActionActionIDTerminalRuleCall_1_0_1() { return cActionActionIDTerminalRuleCall_1_0_1; }

		//button?="button"?
		public Assignment getButtonAssignment_2() { return cButtonAssignment_2; }

		//"button"
		public Keyword getButtonButtonKeyword_2_0() { return cButtonButtonKeyword_2_0; }
	}

	public class InterActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cExplicitInteractionParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Assignment cButtonAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cButtonButtonKeyword_0_1_0 = (Keyword)cButtonAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cActionOnlyInteractionParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cButtonAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cButtonButtonKeyword_1_1_0 = (Keyword)cButtonAssignment_1_1.eContents().get(0);
		
		////------------------------------------------- 
		//// InterAction 
		////------------------------------------------- 
		//InterAction:
		//	ExplicitInteraction button?="button"? | ActionOnlyInteraction button?="button"?;
		public ParserRule getRule() { return rule; }

		//ExplicitInteraction button?="button"? | ActionOnlyInteraction button?="button"?
		public Alternatives getAlternatives() { return cAlternatives; }

		//ExplicitInteraction button?="button"?
		public Group getGroup_0() { return cGroup_0; }

		//ExplicitInteraction
		public RuleCall getExplicitInteractionParserRuleCall_0_0() { return cExplicitInteractionParserRuleCall_0_0; }

		//button?="button"?
		public Assignment getButtonAssignment_0_1() { return cButtonAssignment_0_1; }

		//"button"
		public Keyword getButtonButtonKeyword_0_1_0() { return cButtonButtonKeyword_0_1_0; }

		//ActionOnlyInteraction button?="button"?
		public Group getGroup_1() { return cGroup_1; }

		//ActionOnlyInteraction
		public RuleCall getActionOnlyInteractionParserRuleCall_1_0() { return cActionOnlyInteractionParserRuleCall_1_0; }

		//button?="button"?
		public Assignment getButtonAssignment_1_1() { return cButtonAssignment_1_1; }

		//"button"
		public Keyword getButtonButtonKeyword_1_1_0() { return cButtonButtonKeyword_1_1_0; }
	}

	public class ExplicitInteractionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExplicitInteraction");
		private final RuleCall cExplicitInteractionActivityParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////------------------------------------------- 
		//// ExplicitInteraction 
		////------------------------------------------- 
		////TODO |	ExplicitInteractionService 
		//ExplicitInteraction:
		//	ExplicitInteractionActivity;
		public ParserRule getRule() { return rule; }

		//ExplicitInteractionActivity
		public RuleCall getExplicitInteractionActivityParserRuleCall() { return cExplicitInteractionActivityParserRuleCall; }
	}

	public class ExplicitInteractionActivityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExplicitInteractionActivity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCallActivityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDestAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDestActivityCrossReference_1_0 = (CrossReference)cDestAssignment_1.eContents().get(0);
		private final RuleCall cDestActivityIDTerminalRuleCall_1_0_1 = (RuleCall)cDestActivityCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cForActiomKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cActionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cActionActionCrossReference_2_1_0 = (CrossReference)cActionAssignment_2_1.eContents().get(0);
		private final RuleCall cActionActionIDTerminalRuleCall_2_1_0_1 = (RuleCall)cActionActionCrossReference_2_1_0.eContents().get(1);
		
		//ExplicitInteractionActivity:
		//	"callActivity" dest=[Activity] ("forActiom" action=[Action])?;
		public ParserRule getRule() { return rule; }

		//"callActivity" dest=[Activity] ("forActiom" action=[Action])?
		public Group getGroup() { return cGroup; }

		//"callActivity"
		public Keyword getCallActivityKeyword_0() { return cCallActivityKeyword_0; }

		//dest=[Activity]
		public Assignment getDestAssignment_1() { return cDestAssignment_1; }

		//[Activity]
		public CrossReference getDestActivityCrossReference_1_0() { return cDestActivityCrossReference_1_0; }

		//ID
		public RuleCall getDestActivityIDTerminalRuleCall_1_0_1() { return cDestActivityIDTerminalRuleCall_1_0_1; }

		//("forActiom" action=[Action])?
		public Group getGroup_2() { return cGroup_2; }

		//"forActiom"
		public Keyword getForActiomKeyword_2_0() { return cForActiomKeyword_2_0; }

		//action=[Action]
		public Assignment getActionAssignment_2_1() { return cActionAssignment_2_1; }

		//[Action]
		public CrossReference getActionActionCrossReference_2_1_0() { return cActionActionCrossReference_2_1_0; }

		//ID
		public RuleCall getActionActionIDTerminalRuleCall_2_1_0_1() { return cActionActionIDTerminalRuleCall_2_1_0_1; }
	}

	public class ActionOnlyInteractionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActionOnlyInteraction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExecActionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cActionActionCrossReference_1_0 = (CrossReference)cActionAssignment_1.eContents().get(0);
		private final RuleCall cActionActionIDTerminalRuleCall_1_0_1 = (RuleCall)cActionActionCrossReference_1_0.eContents().get(1);
		
		//ActionOnlyInteraction:
		//	"execAction" action=[Action];
		public ParserRule getRule() { return rule; }

		//"execAction" action=[Action]
		public Group getGroup() { return cGroup; }

		//"execAction"
		public Keyword getExecActionKeyword_0() { return cExecActionKeyword_0; }

		//action=[Action]
		public Assignment getActionAssignment_1() { return cActionAssignment_1; }

		//[Action]
		public CrossReference getActionActionCrossReference_1_0() { return cActionActionCrossReference_1_0; }

		//ID
		public RuleCall getActionActionIDTerminalRuleCall_1_0_1() { return cActionActionIDTerminalRuleCall_1_0_1; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cDataKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDataAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cDataDataCrossReference_3_0 = (CrossReference)cDataAssignment_3.eContents().get(0);
		private final RuleCall cDataDataIDTerminalRuleCall_3_0_1 = (RuleCall)cDataDataCrossReference_3_0.eContents().get(1);
		private final Keyword cCategoryKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCategoryAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCategorySTRINGTerminalRuleCall_5_0 = (RuleCall)cCategoryAssignment_5.eContents().get(0);
		
		////------------------------------------------- 
		//// Action 
		////------------------------------------------- 
		//Action:
		//	"action" name=ID "data" data=[Data] "category" category=STRING;
		public ParserRule getRule() { return rule; }

		//"action" name=ID "data" data=[Data] "category" category=STRING
		public Group getGroup() { return cGroup; }

		//"action"
		public Keyword getActionKeyword_0() { return cActionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"data"
		public Keyword getDataKeyword_2() { return cDataKeyword_2; }

		//data=[Data]
		public Assignment getDataAssignment_3() { return cDataAssignment_3; }

		//[Data]
		public CrossReference getDataDataCrossReference_3_0() { return cDataDataCrossReference_3_0; }

		//ID
		public RuleCall getDataDataIDTerminalRuleCall_3_0_1() { return cDataDataIDTerminalRuleCall_3_0_1; }

		//"category"
		public Keyword getCategoryKeyword_4() { return cCategoryKeyword_4; }

		//category=STRING
		public Assignment getCategoryAssignment_5() { return cCategoryAssignment_5; }

		//STRING
		public RuleCall getCategorySTRINGTerminalRuleCall_5_0() { return cCategorySTRINGTerminalRuleCall_5_0; }
	}

	public class DataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Data");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSchemeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSchemeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSchemeSTRINGTerminalRuleCall_3_0 = (RuleCall)cSchemeAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cHostKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cHostAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cHostSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cHostAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cPortKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cPortAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cPortSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cPortAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cPathKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cPathAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cPathSTRINGTerminalRuleCall_6_1_0 = (RuleCall)cPathAssignment_6_1.eContents().get(0);
		
		////------------------------------------------- 
		//// Data 
		////------------------------------------------- 
		//Data:
		//	"data" name=ID "scheme" scheme=STRING ("host" host=STRING)? ("port" port=STRING)? ("path" path=STRING)?;
		public ParserRule getRule() { return rule; }

		//"data" name=ID "scheme" scheme=STRING ("host" host=STRING)? ("port" port=STRING)? ("path" path=STRING)?
		public Group getGroup() { return cGroup; }

		//"data"
		public Keyword getDataKeyword_0() { return cDataKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"scheme"
		public Keyword getSchemeKeyword_2() { return cSchemeKeyword_2; }

		//scheme=STRING
		public Assignment getSchemeAssignment_3() { return cSchemeAssignment_3; }

		//STRING
		public RuleCall getSchemeSTRINGTerminalRuleCall_3_0() { return cSchemeSTRINGTerminalRuleCall_3_0; }

		//("host" host=STRING)?
		public Group getGroup_4() { return cGroup_4; }

		//"host"
		public Keyword getHostKeyword_4_0() { return cHostKeyword_4_0; }

		//host=STRING
		public Assignment getHostAssignment_4_1() { return cHostAssignment_4_1; }

		//STRING
		public RuleCall getHostSTRINGTerminalRuleCall_4_1_0() { return cHostSTRINGTerminalRuleCall_4_1_0; }

		//("port" port=STRING)?
		public Group getGroup_5() { return cGroup_5; }

		//"port"
		public Keyword getPortKeyword_5_0() { return cPortKeyword_5_0; }

		//port=STRING
		public Assignment getPortAssignment_5_1() { return cPortAssignment_5_1; }

		//STRING
		public RuleCall getPortSTRINGTerminalRuleCall_5_1_0() { return cPortSTRINGTerminalRuleCall_5_1_0; }

		//("path" path=STRING)?
		public Group getGroup_6() { return cGroup_6; }

		//"path"
		public Keyword getPathKeyword_6_0() { return cPathKeyword_6_0; }

		//path=STRING
		public Assignment getPathAssignment_6_1() { return cPathAssignment_6_1; }

		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_6_1_0() { return cPathSTRINGTerminalRuleCall_6_1_0; }
	}

	public class ApplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Application");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApplicationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cAvdKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAvdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAvdINTTerminalRuleCall_3_0 = (RuleCall)cAvdAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWorkdirKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cWorkDirAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cWorkDirIDTerminalRuleCall_4_1_0 = (RuleCall)cWorkDirAssignment_4_1.eContents().get(0);
		private final Keyword cPackageKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPackageNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPackageNameURIParserRuleCall_6_0 = (RuleCall)cPackageNameAssignment_6.eContents().get(0);
		private final Keyword cEntryActiviyKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cMainActivityAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cMainActivityActivityCrossReference_8_0 = (CrossReference)cMainActivityAssignment_8.eContents().get(0);
		private final RuleCall cMainActivityActivityIDTerminalRuleCall_8_0_1 = (RuleCall)cMainActivityActivityCrossReference_8_0.eContents().get(1);
		private final Keyword cTargetKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cTargetAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cTargetINTTerminalRuleCall_10_0 = (RuleCall)cTargetAssignment_10.eContents().get(0);
		private final Keyword cPathKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cPathAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cPathIDTerminalRuleCall_12_0 = (RuleCall)cPathAssignment_12.eContents().get(0);
		
		////------------------------------------------- 
		//// Application 
		////------------------------------------------- 
		//Application:
		//	"Application" name=ID "avd" avd=INT ("workdir" workDir=ID)? "package" packageName=URI "entryActiviy"
		//	mainActivity=[Activity] "target" target=INT "path" path=ID;
		public ParserRule getRule() { return rule; }

		//"Application" name=ID "avd" avd=INT ("workdir" workDir=ID)? "package" packageName=URI "entryActiviy"
		//mainActivity=[Activity] "target" target=INT "path" path=ID
		public Group getGroup() { return cGroup; }

		//"Application"
		public Keyword getApplicationKeyword_0() { return cApplicationKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"avd"
		public Keyword getAvdKeyword_2() { return cAvdKeyword_2; }

		//avd=INT
		public Assignment getAvdAssignment_3() { return cAvdAssignment_3; }

		//INT
		public RuleCall getAvdINTTerminalRuleCall_3_0() { return cAvdINTTerminalRuleCall_3_0; }

		//("workdir" workDir=ID)?
		public Group getGroup_4() { return cGroup_4; }

		//"workdir"
		public Keyword getWorkdirKeyword_4_0() { return cWorkdirKeyword_4_0; }

		//workDir=ID
		public Assignment getWorkDirAssignment_4_1() { return cWorkDirAssignment_4_1; }

		//ID
		public RuleCall getWorkDirIDTerminalRuleCall_4_1_0() { return cWorkDirIDTerminalRuleCall_4_1_0; }

		//"package"
		public Keyword getPackageKeyword_5() { return cPackageKeyword_5; }

		//packageName=URI
		public Assignment getPackageNameAssignment_6() { return cPackageNameAssignment_6; }

		//URI
		public RuleCall getPackageNameURIParserRuleCall_6_0() { return cPackageNameURIParserRuleCall_6_0; }

		//"entryActiviy"
		public Keyword getEntryActiviyKeyword_7() { return cEntryActiviyKeyword_7; }

		//mainActivity=[Activity]
		public Assignment getMainActivityAssignment_8() { return cMainActivityAssignment_8; }

		//[Activity]
		public CrossReference getMainActivityActivityCrossReference_8_0() { return cMainActivityActivityCrossReference_8_0; }

		//ID
		public RuleCall getMainActivityActivityIDTerminalRuleCall_8_0_1() { return cMainActivityActivityIDTerminalRuleCall_8_0_1; }

		//"target"
		public Keyword getTargetKeyword_9() { return cTargetKeyword_9; }

		//target=INT
		public Assignment getTargetAssignment_10() { return cTargetAssignment_10; }

		//INT
		public RuleCall getTargetINTTerminalRuleCall_10_0() { return cTargetINTTerminalRuleCall_10_0; }

		//"path"
		public Keyword getPathKeyword_11() { return cPathKeyword_11; }

		//path=ID
		public Assignment getPathAssignment_12() { return cPathAssignment_12; }

		//ID
		public RuleCall getPathIDTerminalRuleCall_12_0() { return cPathIDTerminalRuleCall_12_0; }
	}

	public class URIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "URI");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cRestUriParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//URI returns ecore::EString:
		//	ID "." RestUri;
		public ParserRule getRule() { return rule; }

		//ID "." RestUri
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//RestUri
		public RuleCall getRestUriParserRuleCall_2() { return cRestUriParserRuleCall_2; }
	}

	public class RestUriElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RestUri");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cURIParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//RestUri returns ecore::EString:
		//	ID | URI;
		public ParserRule getRule() { return rule; }

		//ID | URI
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//URI
		public RuleCall getURIParserRuleCall_1() { return cURIParserRuleCall_1; }
	}
	
	
	private AndroidSystemElements pAndroidSystem;
	private ComponentElements pComponent;
	private ServiceInterfaceElements pServiceInterface;
	private ServiceElements pService;
	private ActivityElements pActivity;
	private LocalActionElements pLocalAction;
	private InterActionElements pInterAction;
	private ExplicitInteractionElements pExplicitInteraction;
	private ExplicitInteractionActivityElements pExplicitInteractionActivity;
	private ActionOnlyInteractionElements pActionOnlyInteraction;
	private ActionElements pAction;
	private DataElements pData;
	private ApplicationElements pApplication;
	private URIElements pURI;
	private RestUriElements pRestUri;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public AndroidLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//AndroidSystem:
	//	data+=Data* action+=Action* serviceInterface=ServiceInterface* component+=Component* application=Application;
	public AndroidSystemElements getAndroidSystemAccess() {
		return (pAndroidSystem != null) ? pAndroidSystem : (pAndroidSystem = new AndroidSystemElements());
	}
	
	public ParserRule getAndroidSystemRule() {
		return getAndroidSystemAccess().getRule();
	}

	////------------------------------------------- 
	//// Component 
	////------------------------------------------- 
	//Component:
	//	Activity | Service;
	public ComponentElements getComponentAccess() {
		return (pComponent != null) ? pComponent : (pComponent = new ComponentElements());
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}

	////------------------------------------------- 
	//// Service Interface
	////------------------------------------------- 
	//ServiceInterface:
	//	"ServiceInterface" name=ID;
	public ServiceInterfaceElements getServiceInterfaceAccess() {
		return (pServiceInterface != null) ? pServiceInterface : (pServiceInterface = new ServiceInterfaceElements());
	}
	
	public ParserRule getServiceInterfaceRule() {
		return getServiceInterfaceAccess().getRule();
	}

	////------------------------------------------- 
	//// Service
	////------------------------------------------- 
	//Service:
	//	"Service" name=ID "implements" interface=[ServiceInterface];
	public ServiceElements getServiceAccess() {
		return (pService != null) ? pService : (pService = new ServiceElements());
	}
	
	public ParserRule getServiceRule() {
		return getServiceAccess().getRule();
	}

	////------------------------------------------- 
	//// Activity 
	////------------------------------------------- 
	//Activity:
	//	"Activity" name=ID launchable?="launchable"? actions+=LocalAction* interactions+=InterAction*;
	public ActivityElements getActivityAccess() {
		return (pActivity != null) ? pActivity : (pActivity = new ActivityElements());
	}
	
	public ParserRule getActivityRule() {
		return getActivityAccess().getRule();
	}

	////------------------------------------------- 
	//// LocalAction 
	////------------------------------------------- 
	//LocalAction:
	//	"action" action=[Action] button?="button"?;
	public LocalActionElements getLocalActionAccess() {
		return (pLocalAction != null) ? pLocalAction : (pLocalAction = new LocalActionElements());
	}
	
	public ParserRule getLocalActionRule() {
		return getLocalActionAccess().getRule();
	}

	////------------------------------------------- 
	//// InterAction 
	////------------------------------------------- 
	//InterAction:
	//	ExplicitInteraction button?="button"? | ActionOnlyInteraction button?="button"?;
	public InterActionElements getInterActionAccess() {
		return (pInterAction != null) ? pInterAction : (pInterAction = new InterActionElements());
	}
	
	public ParserRule getInterActionRule() {
		return getInterActionAccess().getRule();
	}

	////------------------------------------------- 
	//// ExplicitInteraction 
	////------------------------------------------- 
	////TODO |	ExplicitInteractionService 
	//ExplicitInteraction:
	//	ExplicitInteractionActivity;
	public ExplicitInteractionElements getExplicitInteractionAccess() {
		return (pExplicitInteraction != null) ? pExplicitInteraction : (pExplicitInteraction = new ExplicitInteractionElements());
	}
	
	public ParserRule getExplicitInteractionRule() {
		return getExplicitInteractionAccess().getRule();
	}

	//ExplicitInteractionActivity:
	//	"callActivity" dest=[Activity] ("forActiom" action=[Action])?;
	public ExplicitInteractionActivityElements getExplicitInteractionActivityAccess() {
		return (pExplicitInteractionActivity != null) ? pExplicitInteractionActivity : (pExplicitInteractionActivity = new ExplicitInteractionActivityElements());
	}
	
	public ParserRule getExplicitInteractionActivityRule() {
		return getExplicitInteractionActivityAccess().getRule();
	}

	//ActionOnlyInteraction:
	//	"execAction" action=[Action];
	public ActionOnlyInteractionElements getActionOnlyInteractionAccess() {
		return (pActionOnlyInteraction != null) ? pActionOnlyInteraction : (pActionOnlyInteraction = new ActionOnlyInteractionElements());
	}
	
	public ParserRule getActionOnlyInteractionRule() {
		return getActionOnlyInteractionAccess().getRule();
	}

	////------------------------------------------- 
	//// Action 
	////------------------------------------------- 
	//Action:
	//	"action" name=ID "data" data=[Data] "category" category=STRING;
	public ActionElements getActionAccess() {
		return (pAction != null) ? pAction : (pAction = new ActionElements());
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	////------------------------------------------- 
	//// Data 
	////------------------------------------------- 
	//Data:
	//	"data" name=ID "scheme" scheme=STRING ("host" host=STRING)? ("port" port=STRING)? ("path" path=STRING)?;
	public DataElements getDataAccess() {
		return (pData != null) ? pData : (pData = new DataElements());
	}
	
	public ParserRule getDataRule() {
		return getDataAccess().getRule();
	}

	////------------------------------------------- 
	//// Application 
	////------------------------------------------- 
	//Application:
	//	"Application" name=ID "avd" avd=INT ("workdir" workDir=ID)? "package" packageName=URI "entryActiviy"
	//	mainActivity=[Activity] "target" target=INT "path" path=ID;
	public ApplicationElements getApplicationAccess() {
		return (pApplication != null) ? pApplication : (pApplication = new ApplicationElements());
	}
	
	public ParserRule getApplicationRule() {
		return getApplicationAccess().getRule();
	}

	//URI returns ecore::EString:
	//	ID "." RestUri;
	public URIElements getURIAccess() {
		return (pURI != null) ? pURI : (pURI = new URIElements());
	}
	
	public ParserRule getURIRule() {
		return getURIAccess().getRule();
	}

	//RestUri returns ecore::EString:
	//	ID | URI;
	public RestUriElements getRestUriAccess() {
		return (pRestUri != null) ? pRestUri : (pRestUri = new RestUriElements());
	}
	
	public ParserRule getRestUriRule() {
		return getRestUriAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
